#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18408
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace QLPTHtinhoc_Demo
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="QLPhongTin")]
	public partial class QuanliphongtinDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertCLASS(CLASS instance);
    partial void UpdateCLASS(CLASS instance);
    partial void DeleteCLASS(CLASS instance);
    partial void InsertGIAOVIEN(GIAOVIEN instance);
    partial void UpdateGIAOVIEN(GIAOVIEN instance);
    partial void DeleteGIAOVIEN(GIAOVIEN instance);
    partial void InsertMONHOC(MONHOC instance);
    partial void UpdateMONHOC(MONHOC instance);
    partial void DeleteMONHOC(MONHOC instance);
    partial void InsertPCCP(PCCP instance);
    partial void UpdatePCCP(PCCP instance);
    partial void DeletePCCP(PCCP instance);
    partial void InsertPHONGMAY(PHONGMAY instance);
    partial void UpdatePHONGMAY(PHONGMAY instance);
    partial void DeletePHONGMAY(PHONGMAY instance);
    partial void InsertTable(Table instance);
    partial void UpdateTable(Table instance);
    partial void DeleteTable(Table instance);
    partial void InsertTIETHOC(TIETHOC instance);
    partial void UpdateTIETHOC(TIETHOC instance);
    partial void DeleteTIETHOC(TIETHOC instance);
    partial void InsertUser(User instance);
    partial void UpdateUser(User instance);
    partial void DeleteUser(User instance);
    #endregion
		
		public QuanliphongtinDataContext() : 
				base(global::QLPTHtinhoc_Demo.Properties.Settings.Default.QLPhongTinConnectionString1, mappingSource)
		{
			OnCreated();
		}
		
		public QuanliphongtinDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public QuanliphongtinDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public QuanliphongtinDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public QuanliphongtinDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<CLASS> CLASSes
		{
			get
			{
				return this.GetTable<CLASS>();
			}
		}
		
		public System.Data.Linq.Table<GIAOVIEN> GIAOVIENs
		{
			get
			{
				return this.GetTable<GIAOVIEN>();
			}
		}
		
		public System.Data.Linq.Table<MONHOC> MONHOCs
		{
			get
			{
				return this.GetTable<MONHOC>();
			}
		}
		
		public System.Data.Linq.Table<PCCP> PCCPs
		{
			get
			{
				return this.GetTable<PCCP>();
			}
		}
		
		public System.Data.Linq.Table<PHONGMAY> PHONGMAYs
		{
			get
			{
				return this.GetTable<PHONGMAY>();
			}
		}
		
		public System.Data.Linq.Table<Table> Tables
		{
			get
			{
				return this.GetTable<Table>();
			}
		}
		
		public System.Data.Linq.Table<TIETHOC> TIETHOCs
		{
			get
			{
				return this.GetTable<TIETHOC>();
			}
		}
		
		public System.Data.Linq.Table<User> Users
		{
			get
			{
				return this.GetTable<User>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CLASS")]
	public partial class CLASS : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _MALOP;
		
		private string _TENLOP;
		
		private System.Nullable<int> _SOHOCSINH;
		
		private string _GVCN;
		
		private string _KHOI;
		
		private string _GHICHU;
		
		private EntitySet<PCCP> _PCCPs;
		
		private EntitySet<TIETHOC> _TIETHOCs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMALOPChanging(int value);
    partial void OnMALOPChanged();
    partial void OnTENLOPChanging(string value);
    partial void OnTENLOPChanged();
    partial void OnSOHOCSINHChanging(System.Nullable<int> value);
    partial void OnSOHOCSINHChanged();
    partial void OnGVCNChanging(string value);
    partial void OnGVCNChanged();
    partial void OnKHOIChanging(string value);
    partial void OnKHOIChanged();
    partial void OnGHICHUChanging(string value);
    partial void OnGHICHUChanged();
    #endregion
		
		public CLASS()
		{
			this._PCCPs = new EntitySet<PCCP>(new Action<PCCP>(this.attach_PCCPs), new Action<PCCP>(this.detach_PCCPs));
			this._TIETHOCs = new EntitySet<TIETHOC>(new Action<TIETHOC>(this.attach_TIETHOCs), new Action<TIETHOC>(this.detach_TIETHOCs));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MALOP", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int MALOP
		{
			get
			{
				return this._MALOP;
			}
			set
			{
				if ((this._MALOP != value))
				{
					this.OnMALOPChanging(value);
					this.SendPropertyChanging();
					this._MALOP = value;
					this.SendPropertyChanged("MALOP");
					this.OnMALOPChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TENLOP", DbType="NVarChar(50)")]
		public string TENLOP
		{
			get
			{
				return this._TENLOP;
			}
			set
			{
				if ((this._TENLOP != value))
				{
					this.OnTENLOPChanging(value);
					this.SendPropertyChanging();
					this._TENLOP = value;
					this.SendPropertyChanged("TENLOP");
					this.OnTENLOPChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SOHOCSINH", DbType="Int")]
		public System.Nullable<int> SOHOCSINH
		{
			get
			{
				return this._SOHOCSINH;
			}
			set
			{
				if ((this._SOHOCSINH != value))
				{
					this.OnSOHOCSINHChanging(value);
					this.SendPropertyChanging();
					this._SOHOCSINH = value;
					this.SendPropertyChanged("SOHOCSINH");
					this.OnSOHOCSINHChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GVCN", DbType="NVarChar(50)")]
		public string GVCN
		{
			get
			{
				return this._GVCN;
			}
			set
			{
				if ((this._GVCN != value))
				{
					this.OnGVCNChanging(value);
					this.SendPropertyChanging();
					this._GVCN = value;
					this.SendPropertyChanged("GVCN");
					this.OnGVCNChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_KHOI", DbType="NVarChar(50)")]
		public string KHOI
		{
			get
			{
				return this._KHOI;
			}
			set
			{
				if ((this._KHOI != value))
				{
					this.OnKHOIChanging(value);
					this.SendPropertyChanging();
					this._KHOI = value;
					this.SendPropertyChanged("KHOI");
					this.OnKHOIChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GHICHU", DbType="NVarChar(50)")]
		public string GHICHU
		{
			get
			{
				return this._GHICHU;
			}
			set
			{
				if ((this._GHICHU != value))
				{
					this.OnGHICHUChanging(value);
					this.SendPropertyChanging();
					this._GHICHU = value;
					this.SendPropertyChanged("GHICHU");
					this.OnGHICHUChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CLASS_PCCP", Storage="_PCCPs", ThisKey="MALOP", OtherKey="MALOP")]
		public EntitySet<PCCP> PCCPs
		{
			get
			{
				return this._PCCPs;
			}
			set
			{
				this._PCCPs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CLASS_TIETHOC", Storage="_TIETHOCs", ThisKey="MALOP", OtherKey="MALOP")]
		public EntitySet<TIETHOC> TIETHOCs
		{
			get
			{
				return this._TIETHOCs;
			}
			set
			{
				this._TIETHOCs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_PCCPs(PCCP entity)
		{
			this.SendPropertyChanging();
			entity.CLASS = this;
		}
		
		private void detach_PCCPs(PCCP entity)
		{
			this.SendPropertyChanging();
			entity.CLASS = null;
		}
		
		private void attach_TIETHOCs(TIETHOC entity)
		{
			this.SendPropertyChanging();
			entity.CLASS = this;
		}
		
		private void detach_TIETHOCs(TIETHOC entity)
		{
			this.SendPropertyChanging();
			entity.CLASS = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.GIAOVIEN")]
	public partial class GIAOVIEN : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _MAGV;
		
		private string _NAME;
		
		private string _CHUYENMON;
		
		private string _GHICHU;
		
		private EntitySet<PCCP> _PCCPs;
		
		private EntitySet<TIETHOC> _TIETHOCs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMAGVChanging(int value);
    partial void OnMAGVChanged();
    partial void OnNAMEChanging(string value);
    partial void OnNAMEChanged();
    partial void OnCHUYENMONChanging(string value);
    partial void OnCHUYENMONChanged();
    partial void OnGHICHUChanging(string value);
    partial void OnGHICHUChanged();
    #endregion
		
		public GIAOVIEN()
		{
			this._PCCPs = new EntitySet<PCCP>(new Action<PCCP>(this.attach_PCCPs), new Action<PCCP>(this.detach_PCCPs));
			this._TIETHOCs = new EntitySet<TIETHOC>(new Action<TIETHOC>(this.attach_TIETHOCs), new Action<TIETHOC>(this.detach_TIETHOCs));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MAGV", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int MAGV
		{
			get
			{
				return this._MAGV;
			}
			set
			{
				if ((this._MAGV != value))
				{
					this.OnMAGVChanging(value);
					this.SendPropertyChanging();
					this._MAGV = value;
					this.SendPropertyChanged("MAGV");
					this.OnMAGVChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NAME", DbType="NVarChar(50)")]
		public string NAME
		{
			get
			{
				return this._NAME;
			}
			set
			{
				if ((this._NAME != value))
				{
					this.OnNAMEChanging(value);
					this.SendPropertyChanging();
					this._NAME = value;
					this.SendPropertyChanged("NAME");
					this.OnNAMEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CHUYENMON", DbType="NVarChar(50)")]
		public string CHUYENMON
		{
			get
			{
				return this._CHUYENMON;
			}
			set
			{
				if ((this._CHUYENMON != value))
				{
					this.OnCHUYENMONChanging(value);
					this.SendPropertyChanging();
					this._CHUYENMON = value;
					this.SendPropertyChanged("CHUYENMON");
					this.OnCHUYENMONChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GHICHU", DbType="NVarChar(50)")]
		public string GHICHU
		{
			get
			{
				return this._GHICHU;
			}
			set
			{
				if ((this._GHICHU != value))
				{
					this.OnGHICHUChanging(value);
					this.SendPropertyChanging();
					this._GHICHU = value;
					this.SendPropertyChanged("GHICHU");
					this.OnGHICHUChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="GIAOVIEN_PCCP", Storage="_PCCPs", ThisKey="MAGV", OtherKey="MAGV")]
		public EntitySet<PCCP> PCCPs
		{
			get
			{
				return this._PCCPs;
			}
			set
			{
				this._PCCPs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="GIAOVIEN_TIETHOC", Storage="_TIETHOCs", ThisKey="MAGV", OtherKey="MAGV")]
		public EntitySet<TIETHOC> TIETHOCs
		{
			get
			{
				return this._TIETHOCs;
			}
			set
			{
				this._TIETHOCs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_PCCPs(PCCP entity)
		{
			this.SendPropertyChanging();
			entity.GIAOVIEN = this;
		}
		
		private void detach_PCCPs(PCCP entity)
		{
			this.SendPropertyChanging();
			entity.GIAOVIEN = null;
		}
		
		private void attach_TIETHOCs(TIETHOC entity)
		{
			this.SendPropertyChanging();
			entity.GIAOVIEN = this;
		}
		
		private void detach_TIETHOCs(TIETHOC entity)
		{
			this.SendPropertyChanging();
			entity.GIAOVIEN = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MONHOC")]
	public partial class MONHOC : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _MAMON;
		
		private string _NAMESUBJECT;
		
		private string _GHICHU;
		
		private EntitySet<Table> _Tables;
		
		private EntitySet<TIETHOC> _TIETHOCs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMAMONChanging(int value);
    partial void OnMAMONChanged();
    partial void OnNAMESUBJECTChanging(string value);
    partial void OnNAMESUBJECTChanged();
    partial void OnGHICHUChanging(string value);
    partial void OnGHICHUChanged();
    #endregion
		
		public MONHOC()
		{
			this._Tables = new EntitySet<Table>(new Action<Table>(this.attach_Tables), new Action<Table>(this.detach_Tables));
			this._TIETHOCs = new EntitySet<TIETHOC>(new Action<TIETHOC>(this.attach_TIETHOCs), new Action<TIETHOC>(this.detach_TIETHOCs));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MAMON", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int MAMON
		{
			get
			{
				return this._MAMON;
			}
			set
			{
				if ((this._MAMON != value))
				{
					this.OnMAMONChanging(value);
					this.SendPropertyChanging();
					this._MAMON = value;
					this.SendPropertyChanged("MAMON");
					this.OnMAMONChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NAMESUBJECT", DbType="NVarChar(MAX)")]
		public string NAMESUBJECT
		{
			get
			{
				return this._NAMESUBJECT;
			}
			set
			{
				if ((this._NAMESUBJECT != value))
				{
					this.OnNAMESUBJECTChanging(value);
					this.SendPropertyChanging();
					this._NAMESUBJECT = value;
					this.SendPropertyChanged("NAMESUBJECT");
					this.OnNAMESUBJECTChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GHICHU", DbType="NVarChar(250)")]
		public string GHICHU
		{
			get
			{
				return this._GHICHU;
			}
			set
			{
				if ((this._GHICHU != value))
				{
					this.OnGHICHUChanging(value);
					this.SendPropertyChanging();
					this._GHICHU = value;
					this.SendPropertyChanged("GHICHU");
					this.OnGHICHUChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MONHOC_Table", Storage="_Tables", ThisKey="MAMON", OtherKey="MAMON")]
		public EntitySet<Table> Tables
		{
			get
			{
				return this._Tables;
			}
			set
			{
				this._Tables.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MONHOC_TIETHOC", Storage="_TIETHOCs", ThisKey="MAMON", OtherKey="MAMON")]
		public EntitySet<TIETHOC> TIETHOCs
		{
			get
			{
				return this._TIETHOCs;
			}
			set
			{
				this._TIETHOCs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Tables(Table entity)
		{
			this.SendPropertyChanging();
			entity.MONHOC = this;
		}
		
		private void detach_Tables(Table entity)
		{
			this.SendPropertyChanging();
			entity.MONHOC = null;
		}
		
		private void attach_TIETHOCs(TIETHOC entity)
		{
			this.SendPropertyChanging();
			entity.MONHOC = this;
		}
		
		private void detach_TIETHOCs(TIETHOC entity)
		{
			this.SendPropertyChanging();
			entity.MONHOC = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PCCP")]
	public partial class PCCP : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private System.Nullable<int> _MAGV;
		
		private System.Nullable<int> _MALOP;
		
		private EntityRef<GIAOVIEN> _GIAOVIEN;
		
		private EntityRef<CLASS> _CLASS;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnMAGVChanging(System.Nullable<int> value);
    partial void OnMAGVChanged();
    partial void OnMALOPChanging(System.Nullable<int> value);
    partial void OnMALOPChanged();
    #endregion
		
		public PCCP()
		{
			this._GIAOVIEN = default(EntityRef<GIAOVIEN>);
			this._CLASS = default(EntityRef<CLASS>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MAGV", DbType="Int")]
		public System.Nullable<int> MAGV
		{
			get
			{
				return this._MAGV;
			}
			set
			{
				if ((this._MAGV != value))
				{
					if (this._GIAOVIEN.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMAGVChanging(value);
					this.SendPropertyChanging();
					this._MAGV = value;
					this.SendPropertyChanged("MAGV");
					this.OnMAGVChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MALOP", DbType="Int")]
		public System.Nullable<int> MALOP
		{
			get
			{
				return this._MALOP;
			}
			set
			{
				if ((this._MALOP != value))
				{
					if (this._CLASS.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMALOPChanging(value);
					this.SendPropertyChanging();
					this._MALOP = value;
					this.SendPropertyChanged("MALOP");
					this.OnMALOPChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="GIAOVIEN_PCCP", Storage="_GIAOVIEN", ThisKey="MAGV", OtherKey="MAGV", IsForeignKey=true)]
		public GIAOVIEN GIAOVIEN
		{
			get
			{
				return this._GIAOVIEN.Entity;
			}
			set
			{
				GIAOVIEN previousValue = this._GIAOVIEN.Entity;
				if (((previousValue != value) 
							|| (this._GIAOVIEN.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._GIAOVIEN.Entity = null;
						previousValue.PCCPs.Remove(this);
					}
					this._GIAOVIEN.Entity = value;
					if ((value != null))
					{
						value.PCCPs.Add(this);
						this._MAGV = value.MAGV;
					}
					else
					{
						this._MAGV = default(Nullable<int>);
					}
					this.SendPropertyChanged("GIAOVIEN");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CLASS_PCCP", Storage="_CLASS", ThisKey="MALOP", OtherKey="MALOP", IsForeignKey=true)]
		public CLASS CLASS
		{
			get
			{
				return this._CLASS.Entity;
			}
			set
			{
				CLASS previousValue = this._CLASS.Entity;
				if (((previousValue != value) 
							|| (this._CLASS.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CLASS.Entity = null;
						previousValue.PCCPs.Remove(this);
					}
					this._CLASS.Entity = value;
					if ((value != null))
					{
						value.PCCPs.Add(this);
						this._MALOP = value.MALOP;
					}
					else
					{
						this._MALOP = default(Nullable<int>);
					}
					this.SendPropertyChanged("CLASS");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PHONGMAY")]
	public partial class PHONGMAY : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _MAPHONG;
		
		private string _NAME;
		
		private System.Nullable<int> _SOMAY;
		
		private string _STATUT;
		
		private string _GHICHU;
		
		private EntitySet<TIETHOC> _TIETHOCs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMAPHONGChanging(int value);
    partial void OnMAPHONGChanged();
    partial void OnNAMEChanging(string value);
    partial void OnNAMEChanged();
    partial void OnSOMAYChanging(System.Nullable<int> value);
    partial void OnSOMAYChanged();
    partial void OnSTATUTChanging(string value);
    partial void OnSTATUTChanged();
    partial void OnGHICHUChanging(string value);
    partial void OnGHICHUChanged();
    #endregion
		
		public PHONGMAY()
		{
			this._TIETHOCs = new EntitySet<TIETHOC>(new Action<TIETHOC>(this.attach_TIETHOCs), new Action<TIETHOC>(this.detach_TIETHOCs));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MAPHONG", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int MAPHONG
		{
			get
			{
				return this._MAPHONG;
			}
			set
			{
				if ((this._MAPHONG != value))
				{
					this.OnMAPHONGChanging(value);
					this.SendPropertyChanging();
					this._MAPHONG = value;
					this.SendPropertyChanged("MAPHONG");
					this.OnMAPHONGChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NAME", DbType="NVarChar(50)")]
		public string NAME
		{
			get
			{
				return this._NAME;
			}
			set
			{
				if ((this._NAME != value))
				{
					this.OnNAMEChanging(value);
					this.SendPropertyChanging();
					this._NAME = value;
					this.SendPropertyChanged("NAME");
					this.OnNAMEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SOMAY", DbType="Int")]
		public System.Nullable<int> SOMAY
		{
			get
			{
				return this._SOMAY;
			}
			set
			{
				if ((this._SOMAY != value))
				{
					this.OnSOMAYChanging(value);
					this.SendPropertyChanging();
					this._SOMAY = value;
					this.SendPropertyChanged("SOMAY");
					this.OnSOMAYChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_STATUT", DbType="NVarChar(50)")]
		public string STATUT
		{
			get
			{
				return this._STATUT;
			}
			set
			{
				if ((this._STATUT != value))
				{
					this.OnSTATUTChanging(value);
					this.SendPropertyChanging();
					this._STATUT = value;
					this.SendPropertyChanged("STATUT");
					this.OnSTATUTChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GHICHU", DbType="NVarChar(50)")]
		public string GHICHU
		{
			get
			{
				return this._GHICHU;
			}
			set
			{
				if ((this._GHICHU != value))
				{
					this.OnGHICHUChanging(value);
					this.SendPropertyChanging();
					this._GHICHU = value;
					this.SendPropertyChanged("GHICHU");
					this.OnGHICHUChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PHONGMAY_TIETHOC", Storage="_TIETHOCs", ThisKey="MAPHONG", OtherKey="MAPHONG")]
		public EntitySet<TIETHOC> TIETHOCs
		{
			get
			{
				return this._TIETHOCs;
			}
			set
			{
				this._TIETHOCs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_TIETHOCs(TIETHOC entity)
		{
			this.SendPropertyChanging();
			entity.PHONGMAY = this;
		}
		
		private void detach_TIETHOCs(TIETHOC entity)
		{
			this.SendPropertyChanging();
			entity.PHONGMAY = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[Table]")]
	public partial class Table : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private System.Nullable<int> _MAMON;
		
		private EntityRef<MONHOC> _MONHOC;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnMAMONChanging(System.Nullable<int> value);
    partial void OnMAMONChanged();
    #endregion
		
		public Table()
		{
			this._MONHOC = default(EntityRef<MONHOC>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MAMON", DbType="Int")]
		public System.Nullable<int> MAMON
		{
			get
			{
				return this._MAMON;
			}
			set
			{
				if ((this._MAMON != value))
				{
					if (this._MONHOC.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMAMONChanging(value);
					this.SendPropertyChanging();
					this._MAMON = value;
					this.SendPropertyChanged("MAMON");
					this.OnMAMONChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MONHOC_Table", Storage="_MONHOC", ThisKey="MAMON", OtherKey="MAMON", IsForeignKey=true)]
		public MONHOC MONHOC
		{
			get
			{
				return this._MONHOC.Entity;
			}
			set
			{
				MONHOC previousValue = this._MONHOC.Entity;
				if (((previousValue != value) 
							|| (this._MONHOC.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MONHOC.Entity = null;
						previousValue.Tables.Remove(this);
					}
					this._MONHOC.Entity = value;
					if ((value != null))
					{
						value.Tables.Add(this);
						this._MAMON = value.MAMON;
					}
					else
					{
						this._MAMON = default(Nullable<int>);
					}
					this.SendPropertyChanged("MONHOC");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TIETHOC")]
	public partial class TIETHOC : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private System.Nullable<int> _MAMON;
		
		private System.Nullable<int> _MAGV;
		
		private System.Nullable<int> _MAPHONG;
		
		private System.Nullable<int> _MALOP;
		
		private string _TENBAI;
		
		private System.Nullable<System.DateTime> _THOIGIAN;
		
		private System.Nullable<int> _TIET;
		
		private System.Nullable<int> _TIETPPCT;
		
		private string _GHICHU;
		
		private EntityRef<GIAOVIEN> _GIAOVIEN;
		
		private EntityRef<CLASS> _CLASS;
		
		private EntityRef<MONHOC> _MONHOC;
		
		private EntityRef<PHONGMAY> _PHONGMAY;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnMAMONChanging(System.Nullable<int> value);
    partial void OnMAMONChanged();
    partial void OnMAGVChanging(System.Nullable<int> value);
    partial void OnMAGVChanged();
    partial void OnMAPHONGChanging(System.Nullable<int> value);
    partial void OnMAPHONGChanged();
    partial void OnMALOPChanging(System.Nullable<int> value);
    partial void OnMALOPChanged();
    partial void OnTENBAIChanging(string value);
    partial void OnTENBAIChanged();
    partial void OnTHOIGIANChanging(System.Nullable<System.DateTime> value);
    partial void OnTHOIGIANChanged();
    partial void OnTIETChanging(System.Nullable<int> value);
    partial void OnTIETChanged();
    partial void OnTIETPPCTChanging(System.Nullable<int> value);
    partial void OnTIETPPCTChanged();
    partial void OnGHICHUChanging(string value);
    partial void OnGHICHUChanged();
    #endregion
		
		public TIETHOC()
		{
			this._GIAOVIEN = default(EntityRef<GIAOVIEN>);
			this._CLASS = default(EntityRef<CLASS>);
			this._MONHOC = default(EntityRef<MONHOC>);
			this._PHONGMAY = default(EntityRef<PHONGMAY>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MAMON", DbType="Int")]
		public System.Nullable<int> MAMON
		{
			get
			{
				return this._MAMON;
			}
			set
			{
				if ((this._MAMON != value))
				{
					if (this._MONHOC.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMAMONChanging(value);
					this.SendPropertyChanging();
					this._MAMON = value;
					this.SendPropertyChanged("MAMON");
					this.OnMAMONChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MAGV", DbType="Int")]
		public System.Nullable<int> MAGV
		{
			get
			{
				return this._MAGV;
			}
			set
			{
				if ((this._MAGV != value))
				{
					if (this._GIAOVIEN.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMAGVChanging(value);
					this.SendPropertyChanging();
					this._MAGV = value;
					this.SendPropertyChanged("MAGV");
					this.OnMAGVChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MAPHONG", DbType="Int")]
		public System.Nullable<int> MAPHONG
		{
			get
			{
				return this._MAPHONG;
			}
			set
			{
				if ((this._MAPHONG != value))
				{
					if (this._PHONGMAY.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMAPHONGChanging(value);
					this.SendPropertyChanging();
					this._MAPHONG = value;
					this.SendPropertyChanged("MAPHONG");
					this.OnMAPHONGChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MALOP", DbType="Int")]
		public System.Nullable<int> MALOP
		{
			get
			{
				return this._MALOP;
			}
			set
			{
				if ((this._MALOP != value))
				{
					if (this._CLASS.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMALOPChanging(value);
					this.SendPropertyChanging();
					this._MALOP = value;
					this.SendPropertyChanged("MALOP");
					this.OnMALOPChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TENBAI", DbType="NVarChar(200)")]
		public string TENBAI
		{
			get
			{
				return this._TENBAI;
			}
			set
			{
				if ((this._TENBAI != value))
				{
					this.OnTENBAIChanging(value);
					this.SendPropertyChanging();
					this._TENBAI = value;
					this.SendPropertyChanged("TENBAI");
					this.OnTENBAIChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_THOIGIAN", DbType="Date")]
		public System.Nullable<System.DateTime> THOIGIAN
		{
			get
			{
				return this._THOIGIAN;
			}
			set
			{
				if ((this._THOIGIAN != value))
				{
					this.OnTHOIGIANChanging(value);
					this.SendPropertyChanging();
					this._THOIGIAN = value;
					this.SendPropertyChanged("THOIGIAN");
					this.OnTHOIGIANChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TIET", DbType="Int")]
		public System.Nullable<int> TIET
		{
			get
			{
				return this._TIET;
			}
			set
			{
				if ((this._TIET != value))
				{
					this.OnTIETChanging(value);
					this.SendPropertyChanging();
					this._TIET = value;
					this.SendPropertyChanged("TIET");
					this.OnTIETChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TIETPPCT", DbType="Int")]
		public System.Nullable<int> TIETPPCT
		{
			get
			{
				return this._TIETPPCT;
			}
			set
			{
				if ((this._TIETPPCT != value))
				{
					this.OnTIETPPCTChanging(value);
					this.SendPropertyChanging();
					this._TIETPPCT = value;
					this.SendPropertyChanged("TIETPPCT");
					this.OnTIETPPCTChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GHICHU", DbType="NVarChar(200)")]
		public string GHICHU
		{
			get
			{
				return this._GHICHU;
			}
			set
			{
				if ((this._GHICHU != value))
				{
					this.OnGHICHUChanging(value);
					this.SendPropertyChanging();
					this._GHICHU = value;
					this.SendPropertyChanged("GHICHU");
					this.OnGHICHUChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="GIAOVIEN_TIETHOC", Storage="_GIAOVIEN", ThisKey="MAGV", OtherKey="MAGV", IsForeignKey=true)]
		public GIAOVIEN GIAOVIEN
		{
			get
			{
				return this._GIAOVIEN.Entity;
			}
			set
			{
				GIAOVIEN previousValue = this._GIAOVIEN.Entity;
				if (((previousValue != value) 
							|| (this._GIAOVIEN.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._GIAOVIEN.Entity = null;
						previousValue.TIETHOCs.Remove(this);
					}
					this._GIAOVIEN.Entity = value;
					if ((value != null))
					{
						value.TIETHOCs.Add(this);
						this._MAGV = value.MAGV;
					}
					else
					{
						this._MAGV = default(Nullable<int>);
					}
					this.SendPropertyChanged("GIAOVIEN");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CLASS_TIETHOC", Storage="_CLASS", ThisKey="MALOP", OtherKey="MALOP", IsForeignKey=true)]
		public CLASS CLASS
		{
			get
			{
				return this._CLASS.Entity;
			}
			set
			{
				CLASS previousValue = this._CLASS.Entity;
				if (((previousValue != value) 
							|| (this._CLASS.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CLASS.Entity = null;
						previousValue.TIETHOCs.Remove(this);
					}
					this._CLASS.Entity = value;
					if ((value != null))
					{
						value.TIETHOCs.Add(this);
						this._MALOP = value.MALOP;
					}
					else
					{
						this._MALOP = default(Nullable<int>);
					}
					this.SendPropertyChanged("CLASS");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MONHOC_TIETHOC", Storage="_MONHOC", ThisKey="MAMON", OtherKey="MAMON", IsForeignKey=true)]
		public MONHOC MONHOC
		{
			get
			{
				return this._MONHOC.Entity;
			}
			set
			{
				MONHOC previousValue = this._MONHOC.Entity;
				if (((previousValue != value) 
							|| (this._MONHOC.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MONHOC.Entity = null;
						previousValue.TIETHOCs.Remove(this);
					}
					this._MONHOC.Entity = value;
					if ((value != null))
					{
						value.TIETHOCs.Add(this);
						this._MAMON = value.MAMON;
					}
					else
					{
						this._MAMON = default(Nullable<int>);
					}
					this.SendPropertyChanged("MONHOC");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PHONGMAY_TIETHOC", Storage="_PHONGMAY", ThisKey="MAPHONG", OtherKey="MAPHONG", IsForeignKey=true)]
		public PHONGMAY PHONGMAY
		{
			get
			{
				return this._PHONGMAY.Entity;
			}
			set
			{
				PHONGMAY previousValue = this._PHONGMAY.Entity;
				if (((previousValue != value) 
							|| (this._PHONGMAY.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PHONGMAY.Entity = null;
						previousValue.TIETHOCs.Remove(this);
					}
					this._PHONGMAY.Entity = value;
					if ((value != null))
					{
						value.TIETHOCs.Add(this);
						this._MAPHONG = value.MAPHONG;
					}
					else
					{
						this._MAPHONG = default(Nullable<int>);
					}
					this.SendPropertyChanged("PHONGMAY");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[User]")]
	public partial class User : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _IDLogin;
		
		private string _Password;
		
		private System.Nullable<int> _Level;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDLoginChanging(string value);
    partial void OnIDLoginChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnLevelChanging(System.Nullable<int> value);
    partial void OnLevelChanged();
    #endregion
		
		public User()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDLogin", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string IDLogin
		{
			get
			{
				return this._IDLogin;
			}
			set
			{
				if ((this._IDLogin != value))
				{
					this.OnIDLoginChanging(value);
					this.SendPropertyChanging();
					this._IDLogin = value;
					this.SendPropertyChanged("IDLogin");
					this.OnIDLoginChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="VarChar(50)")]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Level]", Storage="_Level", DbType="Int")]
		public System.Nullable<int> Level
		{
			get
			{
				return this._Level;
			}
			set
			{
				if ((this._Level != value))
				{
					this.OnLevelChanging(value);
					this.SendPropertyChanging();
					this._Level = value;
					this.SendPropertyChanged("Level");
					this.OnLevelChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
